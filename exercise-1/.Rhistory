# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(fueleconomy)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(fueleconomy)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(make)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997"]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", ]
# Filter the data set for vehicles manufactured in 1997
manu_1997 <- vehicles[vehicles$year == "1997", ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(manu_1997, decreasing = FALSE)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(manu_1997$hwy, decreasing = FALSE)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
manu_1997 <- manu_1997[order(manu_1997$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
manu_1997 <- manu_1997[order(manu_1997$hwy),]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
manu_1997$average <- (manu_1997$cty + manu_1997$hwy) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty >20]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_20_mpg <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty >20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg == min(two_wheel_20_mpg$hwy),]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg == min(two_wheel_20_mpg$hwy), two_wheel_20_mpg$id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg[two_wheel_20_mpg == min(two_wheel_20_mpg$hwy), two_wheel_20_mpg$id]
# Install and load the "dplyr" library
library(dplyr)
# Install and load the "dplyr" library
library("dplyr")
# Install and load the "dplyr" library
install.packages(dplyr)
# Install and load the "dplyr" library
install.packages(dplyr)
# Install and load the "dplyr" library
install.packages("dplyr")
